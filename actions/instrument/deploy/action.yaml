name: 'Deploy OpenTelemetry for GitHub Actions'
description: 'Automatically Deploy OpenTelemetry for GitHub Actions to all workflows'
branding:
  icon: 'activity'
  color: 'blue'
runs:
  using: composite
  steps:
    - name: "Install dependencies"
      shell: bash
      run: type yq || (sudo apt-get update && sudo apt-get install yq)
    - name: "Checkout"
      uses: actions/checkout@v4
      with:
        token: ${{ inputs.github_token }}
    - name: Canonicalize
      shell: bash
      run: |
        (ls "${{ inputs.workflows_directory }}"/*.yaml "${{ inputs.workflows_directory }}"/*.yml 2> /dev/null || true) | while read -r workflow_file; do
          sed -i 's~plengauer/opentelemetry-github~${{ inputs.action_repository }}~g' "$workflow_file"
          sed -i 's~plengauer/opentelemetry-bash~${{ inputs.action_repository }}~g' "$workflow_file"
          sed -i 's~plengauer/opentelemetry-shell~${{ inputs.action_repository }}~g' "$workflow_file"
          sed -i 's~plengauer/opentelemetry-thoth~${{ inputs.action_repository }}~g' "$workflow_file"
          sed -i 's~plengauer/Thoth~${{ inputs.action_repository }}~g' "$workflow_file"
          sed -i 's~plengauer/thoth~${{ inputs.action_repository }}~g' "$workflow_file"
        done
    - name: "Find self"
      id: find-self
      shell: bash
      run: |
        if [ -r "${{ github.workflow }}" ]; then
           echo path="${{ github.workflow }}" >> "$GITHUB_OUTPUT"
        else
          (ls "${{ inputs.workflows_directory }}"/*.yaml "${{ inputs.workflows_directory }}"/*.yml 2> /dev/null || true) | while read -r workflow_file; do
            [ "$(cat "$workflow_file" | yq .name)" = "${{ github.workflow }}" ] && echo path="$workflow_file" >> "$GITHUB_OUTPUT" && break || true
          done
        fi
    - name: "Find workflow-level observability"
      id: find-workflow-level-instrumentation
      shell: bash
      run: |
        (ls "${{ inputs.workflows_directory }}"/*.yaml "${{ inputs.workflows_directory }}"/*.yml 2> /dev/null || true) | while read -r workflow_file; do
          cat "$workflow_file" | yq .on.workflow_run.workflows 2> /dev/null | grep -qv '^null$' && cat "$workflow_file" | yq .jobs.*.steps[].uses | grep -q /actions/instrument/workflow && echo path="$workflow_file" >> "$GITHUB_OUTPUT" && break || true
        done
    - name: "Deploy workflow-level observability"
      if: steps.find-workflow-level-instrumentation.outputs.path == null
      shell: bash
      run: |
        echo "${{ inputs.workflow_level_instrumentation_template }}" > "${{ inputs.workflows_directory }}/${{ inputs.workflow_level_instrumentation_file_name }}"
        cat "${{ steps.find-self.outputs.path }}" | yq '.jobs[].steps[].env | keys[]' | grep '^OTEL_' | while read -r key; do
          value="$(cat "${{ steps.find-self.outputs.path }}" | yq '.jobs[].steps[] | select(.uses == "${{ inputs.action_repository }}/actions/instrument/deploy@*") | .env.'"$key")"
          yq -i '.jobs[].steps[] | select(.uses == "${{ inputs.action_repository }}/actions/instrument/deploy@*") | .env.'"$key"' = "'"$value"'"' "${{ steps.find-workflow-level-instrumentation.outputs.path }}"
        done
    - name: "Update workflow-level observability triggers"
      if: steps.find-workflow-level-instrumentation.outputs.path != null
      shell: bash
      run: |
        names_file="$(mktemp)"
        (ls "${{ inputs.workflows_directory }}"/*.yaml "${{ inputs.workflows_directory }}"/*.yml 2> /dev/null || true) | while read -r workflow_file; do
          cat "$workflow_file" | yq .name || true
        done \
          | ([ -n "${{ inputs.workflow_level_instrumentation_exclude }}" ] && grep -qvF "$(echo "${{ inputs.workflow_level_instrumentation_exclude }}" | tr ',' '\n' | tr ':' '\n' | tr ';' '\n')" || cat) \
          | grep -vF "$(cat '${{ steps.find-workflow-level-instrumentation.outputs.path }}' | yq .name)" > "$names_file"
        names=""
        while IFS= read -r line; do
          line="\"${line%$'\r'}\""
          [ -n "$names" ] && names="${names}, ${line}" || names="$line"
        done < "$names_file"
        yq -i ".on.workflow_run.workflows = [${names}]" "${{ steps.find-workflow-level-instrumentation.outputs.path }}"
    - name: "Deploy job-level observability"
      shell: bash
      run: |
        (ls "${{ inputs.workflows_directory }}"/*.yaml "${{ inputs.workflows_directory }}"/*.yml 2> /dev/null || true) | while read -r workflow_file; do
          [ -n "${{ inputs.job_level_instrumentation_exclude }}" ] && cat "$workflow_file" | yq .name | grep -qF "$(echo "${{ inputs.job_level_instrumentation_exclude }}" | tr ',' '\n' | tr ':' '\n' | tr ';' '\n')" && continue || true
          cat "$workflow_file" | yq '.jobs | keys[]' | while read -r job_name; do
            [ "$workflow_file" != "${{ steps.find-workflow-level-instrumentation.outputs.path }}" ] || continue
            cat "$workflow_file" | yq ".jobs.$job_name.steps" | grep -qvF null || continue
            if [ -n "$(cat "$workflow_file" | yq ".jobs.$job_name.steps[] | select(.uses == \"${{ inputs.action_repository }}/actions/instrument/job@*\") | .uses")" ]; then continue; fi
            yq -i ".jobs.$job_name.steps |= ([{ \"uses\": \"${{ inputs.action_repository }}/actions/instrument/job@${{ inputs.action_version }}\" }] + .)" "$workflow_file"
            yq -i ".jobs.$job_name.steps[0].with.secrets_to_redact = \"$(echo JHt7IHRvSlNPTihzZWNyZXRzKSB9fQo= | base64 -d)\"" "$workflow_file"
            cat "${{ steps.find-self.outputs.path }}" | yq '.jobs[].steps[] | select(.uses == "${{ inputs.action_repository }}/actions/instrument/deploy@*") | .env | keys[]' | grep '^OTEL_' | while read -r key; do
              yq -i ".jobs.$job_name.steps[0].env.$key = \"$(cat "${{ steps.find-self.outputs.path }}" | yq '.jobs[].steps[] | select(.uses == "${{ inputs.action_repository }}/actions/instrument/deploy@*") | .env.'"$key")\"" "$workflow_file"
            done
          done
        done
    - name: "Open Pull Request"
      if: false
      id: open-pr
      uses: peter-evans/create-pull-request@v7
      with:
        token: ${{ inputs.github_token }}
        branch: "deploy-otel"
        commit-message: "Deploy OpenTelemetry"
        title: "Deploy OpenTelemetry"
        body: |
          This PR deploys workflow-level and job-level OpenTelemetry instrumentation to every workflow.
          (this PR is automatically generated)
        delete-branch: true
    - name: "Delay" # to let the api and PR state catch up ...
      if: steps.open-pr.outputs.pull-request-number != null
      shell: bash
      run: sleep 60
    - name: "Enable auto-merge"
      if: steps.open-pr.outputs.pull-request-number != null
      uses: peter-evans/enable-pull-request-automerge@v3
      with:
        token: ${{ inputs.github_token }}
        pull-request-number: ${{ steps.open-pr.outputs.pull-request-number }}
        merge-method: squash
      continue-on-error: true
inputs:
  github_token:
    description: 'A GitHub token for API access (read/write)'
    default: '${{ github.token }}'
  workflows_directory:
    default: '.github/workflows'
  workflow_level_instrumentation_file_name:
    default: 'observability.yaml'
  workflow_level_instrumentation_exclude:
    description: 'Comma-separated list of workflow names to exclude from workflow-level instrumentation.'
    default: ''
  job_level_instrumentation_exclude:
    description: 'Comma-separated list of workflow names to exclude from job-level instrumentation.'
    default: ''
  workflow_level_instrumentation_template:
    default: |
      name: OpenTelemetry
      on:
        workflow_run:
          workflows: []
          types:
            - completed
      jobs:
        export:
          runs-on: ubuntu-latest
          steps:
            - uses: plengauer/opentelemetry-github/actions/instrument/workflow@v5.10.1
  action_repository:
    default: plengauer/opentelemetry-github
  action_version:
    default: v5.10.1
  debug:
    description: 'Enable debug logging'
    default: ${{ runner.debug }}
